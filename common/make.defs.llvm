#
# This file shows the LLVM toolchain options for PRKs using
# OpenMP, MPI and/or Fortran coarrays only.
#
# Base compilers and language options
#
LLVM_PATH=/usr/local/Cellar/llvm/4.0.1/bin/
# C99 is required in some implementations.
CC=${LLVM_PATH}clang -std=c11
# All of the Fortran code is written for the 2008 standard and requires preprocessing.
FC=/opt/llvm/pgi-flang/bin/flang -Mpreprocess -Mfreeform -L/opt/llvm/pgi-flang/lib -Wl,-rpath=/opt/llvm/pgi-flang/lib
# C++11 may not be required but does no harm here.
CXX=${LLVM_PATH}clang++ -std=c++1z
#
# Compiler flags
#
# -mtune=native is appropriate for most cases.
# -march=native is appropriate if you want portable binaries.
#
DEFAULT_OPT_FLAGS=-g -O3 -mtune=native -ffast-math
#
# If you want to be specific, get the architecture options from:
#   ${LLVM_PATH}llc --version
# and then get the CPU/ISA options from (e.g. for x86-64):
#   ${LLVM_PATH}llc -march=x86-64 -mcpu=help
#
# These are useful to understand why the compiler does not vectorize loops:
#   DEFAULT_OPT_FLAGS+=-Rpass-analysis=loop-vectorize
#   DEFAULT_OPT_FLAGS+=-Rpass=loop-vectorize
#
# OpenMP flags
#
OPENMPFLAG=-fopenmp -L/opt/llvm/4.0.0/lib -lomp
OFFLOADFLAG=-fopenmp -L/opt/llvm/4.0.0/lib -lomp
ORNLACCFLAG= # Flang does not support OpenACC
# Klondike weirdness
# OPENMPFLAG+=-L/opt/intel/compilers_and_libraries_2018.0.082/linux/compiler/lib/intel64_lin -liomp5
# Mac weirdness
# OPENMPFLAG+=-L/usr/local/Cellar/llvm/4.0.0_1/lib
#
# OpenCL flags
#
# MacOS
#OPENCLFLAG=-framework OpenCL
# Linux
OPENCLDIR=/etc/alternatives/opencl-intel-tools
OPENCLFLAG=-I${OPENCLDIR} -L${OPENCLDIR}/lib64 -lOpenCL
#
# Cilk
#
CILKFLAG=
#
# TBB
#
TBBDIR=/usr/local/Cellar/tbb/2017_U7
TBBFLAG=-I${TBBDIR}/include -L${TBBDIR}/lib -ltbb
#
# Parallel STL, Boost, etc.
#
BOOSTFLAG=-DUSE_BOOST -I/usr/local/Cellar/boost/1.64.0_1/include
PSTLFLAG=
KOKKOSDIR=/opt/kokkos/clang/openmp
KOKKOSFLAG=-DUSE_KOKKOS -I${KOKKOSDIR}/include -L${KOKKOSDIR}/lib -lkokkos ${OPENMPFLAG}
RAJADIR=/opt/raja/clang
RAJAFLAG=-DUSE_RAJA -I${RAJADIR}/include -L${RAJADIR}/lib -lRAJA ${OPENMPFLAG} ${TBBFLAG}
#
# CUDA flags
#
# Mac w/ CUDA emulation via https://github.com/hughperkins/coriander
NVCC=/opt/llvm/cocl/bin/cocl
# Linux w/ NVIDIA CUDA
#NVCC=nvcc
CUDAFLAGS=-g -O3 -std=c++11
# https://github.com/tensorflow/tensorflow/issues/1066#issuecomment-200574233
CUDAFLAGS+=-D_MWAITXINTRIN_H_INCLUDED
#
# MPI
#
# We assume you have installed an implementation of MPI-3 that is in your path.
MPICC=mpicc
